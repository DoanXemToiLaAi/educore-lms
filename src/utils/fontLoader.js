/**
 * FONT LOADER UTILITY
 * Utility ƒë·ªÉ load v√† test font ti·∫øng Vi·ªát
 */

class VietnameseFontLoader {
  constructor() {
    this.testString = 'Ti·∫øng Vi·ªát: √°√†·∫£√£·∫°ƒÉ·∫Ø·∫±·∫≥·∫µ·∫∑√¢·∫•·∫ß·∫©·∫´·∫≠√©√®·∫ª·∫Ω·∫π√™·∫ø·ªÅ·ªÉ·ªÖ·ªá√≠√¨·ªâƒ©·ªã√≥√≤·ªè√µ·ªç√¥·ªë·ªì·ªï·ªó·ªô∆°·ªõ·ªù·ªü·ª°·ª£√∫√π·ªß≈©·ª•∆∞·ª©·ª´·ª≠·ªØ·ª±√Ω·ª≥·ª∑·ªπ·ªµƒë √Å√Ä·∫¢√É·∫†ƒÇ·∫Æ·∫∞·∫≤·∫¥·∫∂√Ç·∫§·∫¶·∫®·∫™·∫¨√â√à·∫∫·∫º·∫∏√ä·∫æ·ªÄ·ªÇ·ªÑ·ªÜ√ç√å·ªàƒ®·ªä√ì√í·ªé√ï·ªå√î·ªê·ªí·ªî·ªñ·ªò∆†·ªö·ªú·ªû·ª†·ª¢√ö√ô·ª¶≈®·ª§∆Ø·ª®·ª™·ª¨·ªÆ·ª∞√ù·ª≤·ª∂·ª∏·ª¥ƒê';
    this.fonts = [
      'Inter',
      'Nunito Sans', 
      'Source Sans Pro',
      'Segoe UI',
      'Roboto'
    ];
  }

  /**
   * Ki·ªÉm tra font c√≥ h·ªó tr·ª£ ti·∫øng Vi·ªát kh√¥ng
   * @param {string} fontFamily - T√™n font c·∫ßn ki·ªÉm tra
   * @returns {Promise<boolean>}
   */
  async checkFontSupport(fontFamily) {
    return new Promise((resolve) => {
      // T·∫°o canvas ƒë·ªÉ test font
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      
      // Test v·ªõi font fallback
      context.font = '16px Arial';
      const fallbackWidth = context.measureText(this.testString).width;
      
      // Test v·ªõi font c·∫ßn ki·ªÉm tra
      context.font = `16px "${fontFamily}", Arial`;
      const testWidth = context.measureText(this.testString).width;
      
      // N·∫øu width kh√°c nhau, font ƒë∆∞·ª£c h·ªó tr·ª£
      resolve(Math.abs(fallbackWidth - testWidth) > 1);
    });
  }

  /**
   * Load font v√† ki·ªÉm tra h·ªó tr·ª£ ti·∫øng Vi·ªát
   * @param {string} fontFamily - T√™n font
   * @returns {Promise<boolean>}
   */
  async loadFont(fontFamily) {
    try {
      // S·ª≠ d·ª•ng Font Loading API n·∫øu c√≥
      if ('fonts' in document) {
        await document.fonts.load(`16px "${fontFamily}"`);
        return await this.checkFontSupport(fontFamily);
      }
      
      // Fallback method
      return new Promise((resolve) => {
        const testElement = document.createElement('div');
        testElement.style.fontFamily = `"${fontFamily}", Arial`;
        testElement.style.fontSize = '16px';
        testElement.style.position = 'absolute';
        testElement.style.visibility = 'hidden';
        testElement.textContent = this.testString;
        
        document.body.appendChild(testElement);
        
        setTimeout(() => {
          const isSupported = testElement.offsetWidth > 0;
          document.body.removeChild(testElement);
          resolve(isSupported);
        }, 100);
      });
    } catch (error) {
      console.warn(`L·ªói khi load font ${fontFamily}:`, error);
      return false;
    }
  }

  /**
   * T√¨m font t·ªët nh·∫•t h·ªó tr·ª£ ti·∫øng Vi·ªát
   * @returns {Promise<string>}
   */
  async findBestFont() {
    for (const font of this.fonts) {
      const isSupported = await this.loadFont(font);
      if (isSupported) {
        console.log(`‚úÖ Font "${font}" h·ªó tr·ª£ ti·∫øng Vi·ªát t·ªët`);
        return font;
      } else {
        console.warn(`‚ùå Font "${font}" kh√¥ng h·ªó tr·ª£ ti·∫øng Vi·ªát t·ªët`);
      }
    }
    
    console.warn('Kh√¥ng t√¨m th·∫•y font t·ªëi ∆∞u, s·ª≠ d·ª•ng system font');
    return 'system-ui';
  }

  /**
   * √Åp d·ª•ng font t·ªët nh·∫•t cho trang
   */
  async applyBestFont() {
    const bestFont = await this.findBestFont();
    document.documentElement.style.setProperty('--font-primary', `"${bestFont}", var(--font-primary)`);
    
    // Th√™m class ƒë·ªÉ b√°o hi·ªáu font ƒë√£ load
    document.body.classList.remove('font-loading');
    document.body.classList.add('font-loaded');
    
    return bestFont;
  }

  /**
   * T·∫°o font test UI
   */
  createFontTestUI() {
    const testContainer = document.createElement('div');
    testContainer.innerHTML = `
      <div class="font-test-container" style="position: fixed; top: 10px; right: 10px; background: white; padding: 20px; border: 1px solid #ccc; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); z-index: 9999; max-width: 400px;">
        <h3>üî§ Font Test - Ti·∫øng Vi·ªát</h3>
        <div id="font-test-results"></div>
        <button onclick="this.parentElement.remove()" style="margin-top: 10px; padding: 5px 10px; background: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer;">ƒê√≥ng</button>
      </div>
    `;
    
    document.body.appendChild(testContainer);
    
    // Test t·ª´ng font
    const resultsContainer = document.getElementById('font-test-results');
    this.fonts.forEach(async (font) => {
      const isSupported = await this.checkFontSupport(font);
      const testDiv = document.createElement('div');
      testDiv.className = 'font-test';
      testDiv.style.fontFamily = `"${font}", Arial`;
      testDiv.innerHTML = `
        <strong>${font} ${isSupported ? '‚úÖ' : '‚ùå'}</strong><br>
        <span style="font-size: 14px;">${this.testString.substring(0, 50)}...</span>
      `;
      resultsContainer.appendChild(testDiv);
    });
  }
}

// Export ƒë·ªÉ s·ª≠ d·ª•ng
window.VietnameseFontLoader = VietnameseFontLoader;

// Auto-initialize
document.addEventListener('DOMContentLoaded', async () => {
  const fontLoader = new VietnameseFontLoader();
  await fontLoader.applyBestFont();
  
  // Th√™m font test UI trong development mode
  if (process.env.NODE_ENV === 'development') {
    // Uncomment d√≤ng d∆∞·ªõi ƒë·ªÉ hi·ªÉn th·ªã font test UI
    // fontLoader.createFontTestUI();
  }
});